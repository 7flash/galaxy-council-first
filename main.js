import dotenv from 'dotenv'
dotenv.config();

import fetch from 'node-fetch';

import TelegramBot from 'node-telegram-bot-api';

import { writeFile, readFile } from 'fs/promises';

const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms ?? 1000))

const token = process.env.BOT_TOKEN;

const bot = new TelegramBot(token, {polling: true});

const P = {
  First: 1,
  Characters: 2,
  Third: 3,
  World: 4,
}

let PHASE = P.Third;

let membersNum = 2;

let membersInExpedition = -1;

let readyNum = 0;

let characterNames = ['Hermes', 'flash'];

let characterDetails = ['fast hero', 'master'];

let users = [
  490694645,
  229204469,
]

let users2 = [
  229204469,
  490694645,
]

let userToCharacter = {
  "229204469": 1,
  "490694645": 0,
}

let userToWorld = {
  "229204469": 1,
  "490694645": 0,
}

let worlds = ['Galaxy World', 'first land']

const timeoutSec = 1;

characterNames = [], characterDetails = [], users = [], users2 = [], userToCharacter = {}, userToWorld = {};

let pollChatId = 0;

let pollMessageId = 0;

const getPicture = (prompt) => {
  const openaiApi = 'https://labs.openai.com/api/labs/tasks'
  const authToken = process.env.DALLE_TOKEN

  return fetch(`${openaiApi}`, {
      method: "POST",
      body: JSON.stringify({
        task_type: "text2im",
        prompt: {
          caption: prompt,
          batch_size: 4,
        },
      }),
      headers: {
        "Authorization": `Bearer ${authToken}`,
        "Content-Type": "application/json",
      }
    }).then(resp => resp.json())
    .then(async (task) => {
      const { id: taskId } = task;

      while (task.status == "pending") {
        await sleep(2000);

        task = await fetch(`${openaiApi}/${taskId}`, {
          method: "GET",
          headers: {
            "Authorization": `Bearer ${authToken}`,
          },
        }).then(resp => resp.json())
      }

      if (task.status == "rejected") throw new Error(task);

      return task.generations.data[0].generation.image_path;
    })

}


(async function() {
  try {
    const db = JSON.parse(await readFile('.db'));

    if (db) {
      users = db.users;
      users2 = db.users2;
      userToCharacter = db.userToCharacter;
      userToWorld = db.userToWorld;
      worlds = db.worlds;
      characterNames = db.characterNames;
      characterDetails = db.characterDetails;
    }
  
  } catch (e) {
  }
})();

bot.on('poll_answer', async (e) => {
  debugger;

  const poll = await bot.stopPoll(pollChatId, pollMessageId);

  const winner = poll.options.sort((a,b) => a.voter_count - b.voter_count)[0].text;

  const result = await getPicture(winner);

  bot.sendMessage(chatId, `<a href="${result}"  >${winner}</a>`, {
      parse_mode: 'HTML'
  });

PHASE = P.First;

  characterNames = [], characterDetails = [], users = [], users2 = [], userToCharacter = {}, userToWorld = {};
});

bot.on('new_chat_members', (e) => {
  if (e.new_chat_member) {
    const fullName = `${e.new_chat_member.first_name} ${e.new_chat_member.last_name}`;

    bot.sendMessage(e.chat.id, `
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ø—Ä–æ–≥—Ä–µ—Å—Å–æ—Ä "${fullName}"! –ú–∏—Ä–æ–≤–æ–π –°–æ–≤–µ—Ç üëÅ –æ–¥–æ–±—Ä–∏–ª –≤–∞—à–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π. –í—ã –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –æ–¥–Ω–∏–º –∏–∑ –ª—É—á—à–∏—Ö –≤ –∞–∫–∞–¥–µ–º–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ—Ä—Å—Ç–≤–∞.

    –Ø –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ü—Ä–æ–≥—Ä–µ—Å—Å–æ—Ä v 0.26.2. –î–ª—è —Å—Ç–∞—Ä—Ç–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start.
    
    –ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help. –ï—Å–ª–∏ –≤—ã –ø–æ–ø–∞–ª–∏ —Å—é–¥–∞ –≤–æ –≤—Ä–µ–º—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—Ç—è –¥—Ä—É–≥–æ–π —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –∫–∞–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏. –£–¥–∞—á–∏!  
  `);

    bot.sendPhoto(e.chat.id, 'https://i.ibb.co/7CK7GkP/Slide-7-b.jpg');

    membersNum++;
  }
});

bot.on('left_chat_member', (e) => {
  const fullName = `${e.left_chat_member.first_name} ${e.left_chat_member.last_name}`;

  bot.sendMessage(e.chat.id, `–ü—Ä–æ–≥—Ä–µ—Å—Å–æ—Ä "${fullName}" –ø–æ–∫–∏–Ω—É–ª —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é`);
  
  membersNum--;
});

bot.on('message', async (e) => {
  const chatId = e.chat.id;

  pollChatId = chatId;

  try {
    const message = e.text;
  
    const fullName = `${e.from.first_name} ${e.from.last_name}`;
    
    const pattern = /^([a-zA-Z]*):([a-zA-Z ]*)$/;
  
    if (message.startsWith('/start')) {
      bot.sendMessage(chatId, `
        –í–ù–ò–ú–ê–ù–ò–ï –ö–û–ú–ê–ù–î–ê –ü—Ä–æ–≥—Ä–µ—Å—Å–æ—Ä "${fullName}" –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∑–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏, –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å.
        
        –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–π —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ [–æ–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞/–≤—Ä–µ–º–µ–Ω–∞ –Ω–µ –≤–∞–∂–Ω—ã]    
      `);
  
      membersInExpedition = membersNum;
  
      PHASE = P.Characters;
  
      return;
    } else if (pattern.test(message)) {
      const [first, second] = pattern.exec(message);

      if (PHASE == P.Characters || PHASE == P.Third) {
        if (users.includes(e.from.id)) return;
    
        bot.sendMessage(chatId, `–ü—Ä–æ–≥—Ä–µ—Å—Å–æ—Ä "${fullName}" –∞–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤, —ç—Ç–æ "${first}"`);
    
        characterDetails.push(second.trim());
        characterNames.push(first.trim());

        users.push(e.from.id);

        userToCharacter[e.from.id] = characterNames.length - 1;

        if (PHASE != P.Third) {
          if (users.length >= Math.ceil(membersInExpedition * 72 / 100)) {
            PHASE = P.Third;
      
            bot.sendMessage(chatId, `–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ—Ä–æ–≤ —Å–æ–∑–¥–∞–ª–∏ –∞–≤–∞—Ç–∞—Ä, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç—Å—á–µ—Ç 1 –º–∏–Ω—É—Ç–∞`);
            
            setTimeout(() => {
              bot.sendMessage(chatId, `
              –ü—Ä–æ–≥—Ä–µ—Å—Å–æ—Ä—ã! –í–∞—à–∏ –≥–µ—Ä–æ–∏ –≥–æ—Ç–æ–≤—ã, —ç—Ç–æ: ${characterNames.join(', ')}.        
              `);
      
              bot.sendMessage(chatId, `<i>–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞..</i>`, {
                parse_mode: 'HTML'
              });
      
              setTimeout(() => {
                bot.sendMessage(chatId, `
                  –ü—Ä–æ–≥—Ä–µ—Å—Å–æ—Ä—ã! –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å, –æ–ø–∏—à–∏—Ç–µ –µ–≥–æ [–æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ]                
                `);
  
                PHASE = P.World;
              }, 1000 * Math.random() * 5);
            }, timeoutSec * 1000);
          }  
        }
      }
    } else if (/^[a-zA-Z ]*$/.test(message)) {
      if (PHASE == P.World || PHASE == P.Fifth) {
        if (!users.includes(e.from.id)) {
          bot.sendMessage(`${fullName} –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –Ω–æ –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.`);
          return;
        }

        if (users2.includes(e.from.id)) return;
        users2.push(e.from.id);

        const world = message.trim();
        // const worldDescription = second.trim();

        worlds.push(world);

        userToWorld[e.from.id] = worlds.length - 1;

        // if (!characterNames.includes(characterName)) {
        //   bot.sendMessage(chatId, `${characterName} –Ω–µ –æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞`);
        //   return;
        // }

        bot.sendMessage(chatId, `–ü—Ä–æ–≥—Ä–µ—Å—Å–æ—Ä "${fullName}" –≤–∏–¥–∏—Ç –º–∏—Ä –∫–∞–∫ "${world}"`);
      
        if (PHASE != P.Fifth) {
          if (users2.length >= Math.ceil(users.length * 72 / 100)) {
            PHASE = P.Fifth;
  
            bot.sendMessage(chatId, '–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ—Ä–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Å–≤–æ–µ –≤–∏–¥–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç—Å—á–µ—Ç 1 —Å–µ–∫—É–Ω–¥–∞');

            setTimeout(async () => {
              const msg = await bot.sendPoll(chatId, '–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π:', users2.map((userId, index) => {
                const worldIndex = userToWorld[userId];
                const worldDescription = worlds[worldIndex];

                return `${worldDescription}`;
              }));

              pollMessageId = msg.message_id;
            }, timeoutSec * 1000);
          }
        }
      }
    }

    await writeFile('.db', JSON.stringify({
      users, users2, worlds, userToCharacter, userToWorld, characterNames, characterDetails,
    }))
  
  } catch (e) {
    bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. ` + e.toString().substring(0, 42));
  }
});

// let stage = 1;

// bot.onText(/\/echo (.+)/, (msg, match) => {
//   const chatId = msg.chat.id;
//   const resp = match[1]; // the captured "whatever"
//   bot.sendMessage(chatId, resp);
// });

// let proposals = [];
// let characters = [];
// let votes = [];

// let phase = 0;
// const totalPhases = 5;
// let events = [];

// let pollMessageId = -1;

// let PHASE = 0;

// bot.on('message', async (msg) => {
//   debugger;

//   const chatId = msg.chat.id;

//   try {
//     if (msg.text.startsWith('/start')) {
//       if (PHASE != 0) return;

//       bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–ø–∏—à–∏ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º) /newCharacter');

//       return;
//     }

    // if (msg.text.startsWith('/newCharacter')) {
    //   if (phase != 0) return;

    //   const character = msg.text.replace('/newCharacter', '').text();

    //   bot.sendMessage('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä, ' + character);

    //   return;
    // }

    // if (msg.text.startsWith('/beginProposals')) {
    //   if (phase != 0) return;

    //   phase = 1;

    //   bot.sendMessage('–ü—Ä–µ–¥–ª–∞–≥–∞–π —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ');

    //   return;
    // }

    // if (msg.text.startsWith('/newEvent')) {
    //   if (phase != 1) return;

    //   const event = msg.text.replace('/newEvent', '').text();
      
    //   events.push(event);

    //   return;
    // }

    // if (msg.text.startsWith('/beginVoting')) {
    //   if (phase != 1) return;

    //   phase = 2;

    //   const pollMessage = await bot.sendPoll(chatId, '–ü—Ä–æ–≥—Ä–µ—Å—Å–æ—Ä—ã –Ω–∞—á–∏–Ω–∞—é—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å –Ω–æ–≤—ã–π –º–∏—Ä. –ö–∞–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ?', events);
 
    //   pollMessageId = pollMessage.message_id;

    //   return;
    // }

    // if (msg.text.startsWith('/completeWorld')) {
    //   if (phase == 0 || phase % 2 != 0) return;

    //   const pollResults = await bot.stopPoll(chatId, messageId);

    //   const options = pollResults.options.sort((a, b) => a.voter_count - b.voter_count);

    //   const chosenOption = options.pop();

    //   bot.sendMessage(chatId, '–ú–∏—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ' + chosenOption);

    //   phase++;

    //   return;
    // }

    // if (msg.text.startsWith('/reset')) {



    //   return;
    // }

    // if (msg.text.startsWith('/proposeWorld')) {
    //   if (phase != 1) return;

    //   const character = msg.text.replace('/propose', '').text();
    
    //   return;
    // }

    // if (msg.text.startsWith('/beginWorld')) {
    //   bot.sendMessage(chatId, "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –º–∏—Ä–∞ –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ø–∞–ª–∏, –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.");

    //   const pollOptions = [];

    //   for (let i = 0; i < proposals.length; i++) {
    //     pollOptions.push(proposals[i]);
    //   }

    //   const pollMessage = bot.sendPoll(chatId, "–ü—Ä–æ–≥—Ä–µ—Å—Å–æ—Ä—ã –Ω–∞—á–∏–Ω–∞—é—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å –Ω–æ–≤—ã–π –º–∏—Ä. –ö–∞–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ? (–≤—Ä–µ–º—è 1 –º–∏–Ω—É—Ç–∞)", pollOptions);

    //   const messageId = (await pollMessage).message_id;

    //   const pollResults = await bot.stopPoll(chatId, messageId, {
        
    //   });

    //   const options = pollResults.options.sort((a, b) => a.voter_count - b.voter_count);

    //   const chosenOption = options.pop();

    //   return;
    // }

    // if (msg.text.startsWith('/completeWorld')) {
    //   bot.sendMessage(chatId, "–ú–∏—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: " + world);

    //   phase = 2;

    //   bot.sendMessage(chatId, "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è. –û–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–∞–∑—É, –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º. (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)");

    //   return;
    // }

    // if (msg.text.startsWith('/reset')) {
    //   phase = 0;
    //   worlds = [];
    //   characters = [];
    //   votes = [];
    //   return;
    // }
    
    // if (msg.text.startsWith('/propose')) {
    //   characters.push(msg.text.replace('/propose', '').trim());
    //   bot.sendMessage(chatId, `–ü—Ä–∏–Ω—è—Ç–æ! –ó–∞ —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –º–æ–≥—É—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–º–∞–Ω–¥—É /vote ${characters.length}`);
    //   return;
    // }
  
    // if (msg.text.startsWith('/vote')) {
    //   const idx = Number.parseInt(msg.text.replace('/vote', ''));
      
    //   console.dir(characters[idx]);
    //   if (!idx || idx > characters.length) {
    //     bot.sendMessage(chatId, `–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ${idx} (–∏—Ö –≤—Å–µ–≥–æ ${characters.length})`);
    //     return;
    //   }
  
    //   votes[idx] ||= 0;
    //   votes[idx]++;
  
    //   bot.sendMessage(chatId, `–ü—Ä–∏–Ω—è—Ç–æ! –ù–∞ –æ–¥–∏–Ω –≥–æ–ª–æ—Å –±–æ–ª—å—à–µ –∑–∞ ${characters[idx-1]} (–≤—Å–µ–≥–æ ${votes[idx]})`);
  
    //   return;
    // }
  
    // if (msg.text.startsWith('/complete')) {
    //   let mostVotesIdx = 0;
    //   let mostVotesValue = 0;
    //   for (let i = 0; i < votes.length; i++) {
    //     if (votes[i] >= mostVotesValue) {
    //       mostVotesIdx = i;
    //       mostVotesValue = votes[i];
    //     }
    //   }
      
    //   console.log(mostVotesIdx);
    //   const character = characters[mostVotesIdx];
    //   console.log(character);
  
    //   const result = await getPicture(character);
  
    //   // bot.sendPhoto(chatId, result);
    
    //   bot.sendMessage(chatId, `<a href="${result}"  >${character}</a>`, {
    //       parse_mode: 'HTML'
    //   });
  
    //   return;
    // }
  
    // if (msg.text.startsWith('/reset')) {
    //   characters = [];
    //   votes = [];
  
    //   bot.sendMessage(chatId, '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /propose');
    
    //   return;
    // }
//   } catch (err) {
//     bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. ` + err.toString().substring(0, 42));
//   }
// });